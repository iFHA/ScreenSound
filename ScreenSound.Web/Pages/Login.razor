@page "/Login"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthAPI api
@inject NavigationManager navigationManager
@attribute [AllowAnonymous]

<AuthorizeView>
    <Authorized>
        <p>Você está conectado como @context.User.Identity.Name </p>
    </Authorized>
    <NotAuthorized>
        <MudForm>

            <MudTextField T="string" Label="Email" @bind-Value="email" Variant="Variant.Outlined" Class="my-4"
                Required="true" RequiredError="Email obrigatório!" OnlyValidateIfDirty="true" />

            <MudTextField T="string" Label="Senha" @bind-Value="senha" InputType="InputType.Password"
                Variant="Variant.Outlined" Class="my-4" Required="true" RequiredError="Senha obrigatória!"
                OnlyValidateIfDirty="true" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-6" @onclick="FazerLogin">
                Login
            </MudButton>

        </MudForm>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? email;
    private string? senha;
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task FazerLogin()
    {
        var loginResponse = await api.LoginAsync(new LoginRequest(email!, senha!));
        if (loginResponse.Sucesso)
        {
            string targetUrl = ReturnUrl is not null ? ReturnUrl : "/artistas";
            navigationManager.NavigateTo(targetUrl);
        }
    }
}