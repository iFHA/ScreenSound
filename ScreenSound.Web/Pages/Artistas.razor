@using Microsoft.AspNetCore.Authorization;
@page "/Artistas"
@inject ArtistaAPI artistaAPI
@attribute [Authorize]

<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Artistas cadastrados</MudText>
    <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>

@if (artistasPorPagina is not null)
{
    <MudGrid>
    @foreach (var artista in artistasPorPagina)
        {
            <MudItem xs="3">
                <CardArtista Artista="artista" />
            </MudItem>
        }
        </MudGrid>
}
@if (ErrorMessage is not null)
{
    <p>@ErrorMessage</p>
}


@code {
    @* [Parameter] *@
    private int page = 1;
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;
    private ICollection<ArtistaResponse>? artistasPorPagina;
    private ICollection<ArtistaResponse>? artistas;
    private string? ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            artistas = await artistaAPI.GetArtistasAsync();
            if (artistas is not null)
            {
                artistas = artistas.OrderBy(artista => artista.Nome).ToList();
                totalItens = artistas.Count();
                totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
                PaginaMudou(1);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    public void PaginaMudou(int pageNumber)
    {
        var indice = pageNumber - 1;
        artistasPorPagina = artistas!
        .Skip(tamanho * indice)
        .Take(tamanho)
        .ToList();
    }
}